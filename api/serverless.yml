service: todo

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  environment:
    TABLE_NAME: todoServerless
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [todosTable, Arn]

resources:
  Resources:
    todosTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: userItem
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: userItem
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  jwtAuthorizer:
    handler: src/routes/authorize.handle

  userResource:
    handler: src/routes/user/handler.handle
    events:
      - http:
          path: user/{userId}
          method: get
          authorizer: &authorizer
            name: jwtAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
          cors: &cors-setting true

      - http:
          path: user
          method: post
          authorizer: *authorizer
          cors: *cors-setting
          request:
            parameters:
              paths:
                userId: true

  todoResource:
    handler: src/routes/todos/handler.handle
    events:
      - http:
          path: user/{userId}/todos
          method: get
          authorizer: *authorizer
          cors: *cors-setting
          request:
            parameters:
              paths:
                userId: true

      - http:
          path: user/{userId}/todos/{todoId}
          method: get
          authorizer: *authorizer
          cors: *cors-setting
          request:
            parameters:
              paths:
                userId: true
                todoId: true

      - http:
          path: user/{userId}/todos
          method: post
          authorizer: *authorizer
          cors: *cors-setting
          request:
            parameters:
              paths:
                userId: true

      - http:
          path: user/{userId}/todos/{todoId}
          method: put
          authorizer: *authorizer
          cors: *cors-setting
          request:
            parameters:
              paths:
                userId: true
                todoId: true

      - http:
          path: user/{userId}/todos/{todoId}
          method: delete
          authorizer: *authorizer
          cors: *cors-setting
          request:
            parameters:
              paths:
                userId: true
                todoId: true

package:
  individually: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: "non-linux"
    usePoetry: true
    pythonBin: /home/gitpod/.pyenv/shims/python
